{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Virtual Reality Meeting Environment API Documentation \u00b6 Welcome to the API documenation for the Virtual Reality Meeting Environment! Backend Server See jieyouxu/VRME-Server-Rust . This API documentation assumes basic familiarity with the HTTP(S) protocol and assumes paths are in *nix systems ( / -separated paths). API Summary \u00b6 This API provides two major resources with authentication: Users and Accounts : see Accounts and Authentication API for details. Registration: POST /register Login: POST /login Logout: POST /logout Accounts: Get account id with email: GET /accounts/uuid Get account info: GET /accounts/{uuid} Update account info: PUT /accounts/{uuid} Delete account: DELETE /account Avatars: Get avatar: GET /accounts/{uuid}/avatar Upload avatar: POST /accounts/{uuid}/avatar Delete avatar: DELETE /accounts/{uuid}/avatar Meeting Sessions and Presentations : see Meetings and Presentations API for details. Meetings: Create session: POST /meetings Add listener: POST /meetings/{meeting_id} Leave: POST /meetings/{meeting_id}/leave Presentations: Get presentation: GET /meetings/{meeting_id}/presentation Upload presentation: POST /meetings/{meeting_id}/presentation Delete presentation: DELETE /meetings/{meeting_id}/presentation Authentication \u00b6 When an endpoint is protected , it will be explicitly marked. Read more about authentication requirements here . When an endpoint is protected , it will have a yellow bubble indicating that authentication is required; for example: Authentication Required ... details on authentication Payloads \u00b6 When payloads are required, they must be provided in JSON format unless otherwise specified. The server returns all response payloads in JSON except for files or otherwise specified. We describe a JSON object's fields using a table. When a JSON object is nested , we use the dot . to denote a nested layer. For example { \"outer\" : { \"inner\" : true } } We refer to the \"inner\" key as outer.inner in our tables. Path Parameters \u00b6 When path parameters are required, they are denoted by braces in the API endpoint's path. For example, POST /meetings/{meeting_id}/presenter contains the path parameter {meeting_id} which must be specified by the client. Rate Limiting \u00b6 Requests made to the VRME API are throttled by rate-limiting. If requests are made too frequent, their processing will be rejected by the server and the 429 Too Many Requests error response will be returned.","title":"Overview"},{"location":"#virtual-reality-meeting-environment-api-documentation","text":"Welcome to the API documenation for the Virtual Reality Meeting Environment! Backend Server See jieyouxu/VRME-Server-Rust . This API documentation assumes basic familiarity with the HTTP(S) protocol and assumes paths are in *nix systems ( / -separated paths).","title":"Virtual Reality Meeting Environment API Documentation"},{"location":"#api-summary","text":"This API provides two major resources with authentication: Users and Accounts : see Accounts and Authentication API for details. Registration: POST /register Login: POST /login Logout: POST /logout Accounts: Get account id with email: GET /accounts/uuid Get account info: GET /accounts/{uuid} Update account info: PUT /accounts/{uuid} Delete account: DELETE /account Avatars: Get avatar: GET /accounts/{uuid}/avatar Upload avatar: POST /accounts/{uuid}/avatar Delete avatar: DELETE /accounts/{uuid}/avatar Meeting Sessions and Presentations : see Meetings and Presentations API for details. Meetings: Create session: POST /meetings Add listener: POST /meetings/{meeting_id} Leave: POST /meetings/{meeting_id}/leave Presentations: Get presentation: GET /meetings/{meeting_id}/presentation Upload presentation: POST /meetings/{meeting_id}/presentation Delete presentation: DELETE /meetings/{meeting_id}/presentation","title":"API Summary"},{"location":"#authentication","text":"When an endpoint is protected , it will be explicitly marked. Read more about authentication requirements here . When an endpoint is protected , it will have a yellow bubble indicating that authentication is required; for example: Authentication Required ... details on authentication","title":"Authentication"},{"location":"#payloads","text":"When payloads are required, they must be provided in JSON format unless otherwise specified. The server returns all response payloads in JSON except for files or otherwise specified. We describe a JSON object's fields using a table. When a JSON object is nested , we use the dot . to denote a nested layer. For example { \"outer\" : { \"inner\" : true } } We refer to the \"inner\" key as outer.inner in our tables.","title":"Payloads"},{"location":"#path-parameters","text":"When path parameters are required, they are denoted by braces in the API endpoint's path. For example, POST /meetings/{meeting_id}/presenter contains the path parameter {meeting_id} which must be specified by the client.","title":"Path Parameters"},{"location":"#rate-limiting","text":"Requests made to the VRME API are throttled by rate-limiting. If requests are made too frequent, their processing will be rejected by the server and the 429 Too Many Requests error response will be returned.","title":"Rate Limiting"},{"location":"about/","text":"About the Project \u00b6 The Virtual Reality Meeting Environment project is designed to mitigate communication difficulities between users of remote meeting platforms. Technology Stack \u00b6 The backend is built using Rust with the actix-web framework. Backend Server jieyouxu/VRME-Server-Rust The Oculus Go frontend is built with Unity . Oculus Go Frontend Oculus Go Frontend The external account and meeting session management website is built with React.js . Management Website Frontend Management Website Frontend Team Members \u00b6 Name Role Email Jieyou Xu (Joe) Team Lead, Backend Developer jieyou.xu.18@ucl.ac.uk Yingming Luo Frontend Developer (Unity) yingming.luo.18@ucl.ac.uk Wenxin Wang Frontend Developer (Website) wenxin.wang.18@ucl.ac.uk","title":"Project"},{"location":"about/#about-the-project","text":"The Virtual Reality Meeting Environment project is designed to mitigate communication difficulities between users of remote meeting platforms.","title":"About the Project"},{"location":"about/#technology-stack","text":"The backend is built using Rust with the actix-web framework. Backend Server jieyouxu/VRME-Server-Rust The Oculus Go frontend is built with Unity . Oculus Go Frontend Oculus Go Frontend The external account and meeting session management website is built with React.js . Management Website Frontend Management Website Frontend","title":"Technology Stack"},{"location":"about/#team-members","text":"Name Role Email Jieyou Xu (Joe) Team Lead, Backend Developer jieyou.xu.18@ucl.ac.uk Yingming Luo Frontend Developer (Unity) yingming.luo.18@ucl.ac.uk Wenxin Wang Frontend Developer (Website) wenxin.wang.18@ucl.ac.uk","title":"Team Members"},{"location":"terminology/","text":"Terminology \u00b6 The API documentation uses some terminology throughout, that are usually defined by international standards and/or defined by IETF RFCs. Terminology Link base64 RFC 4648 PBKDF2 RFC 8018 SHA-256 RFC 6234 HTTP RFC 2616 TLS RFC 5246 JSON RFC 8259","title":"Terminology"},{"location":"terminology/#terminology","text":"The API documentation uses some terminology throughout, that are usually defined by international standards and/or defined by IETF RFCs. Terminology Link base64 RFC 4648 PBKDF2 RFC 8018 SHA-256 RFC 6234 HTTP RFC 2616 TLS RFC 5246 JSON RFC 8259","title":"Terminology"},{"location":"accounts-authentication/","text":"Accounts and Authentication API \u00b6 This API serves resources related to accounts and authentication.","title":"Overview"},{"location":"accounts-authentication/#accounts-and-authentication-api","text":"This API serves resources related to accounts and authentication.","title":"Accounts and Authentication API"},{"location":"accounts-authentication/authentication/","text":"Authentication \u00b6 Summary \u00b6 Most VRME API endpoints are protected . To gain access, the user is required to: Register an account through POST /register . Login via POST /login , which returns an auth_token . Send the AuthPayload in the Authorization: Bearer <token> header taking the place of the <token> place holder. Session-Based Authentication and Validity Duration \u00b6 Authentication in VRME APIs is session-based . The auth_token represents an authenticated user for a fixed duration (defaults to 30 days). When an user logs in, a new authentication session is issued and any old auth_token s are invalidated. When a user sucessfully authenticates for some protected API endpoint, then the expiration date of the auth_token (and thus the valid duration of the authentication session which the token represents) is automatically extended. For example, if a user's client holds an auth_token that was issued 5 days ago (meaning it will expire in 25 days), and that user sucessfully authenticates via one of the protected API endpoints, then that auth_token 's expiration date will be pushed back 5 days. The more frequent the user authenticates, the longer the auth_token is valid for. Detailed Authentication Flow \u00b6 Register an Account \u00b6 New users are required to register through POST /register . See the API endpoint documentation for detailed payload specification and return value. Upon successful registration, the client must store (persistently) the returned user_id which is the user's unique identifier; this user_id will be used as part of the authentication process. Login \u00b6 Password Security NEVER store the plain-text password or the client-side hashed password in caches / filesystem. Hashing Password We require that when the user is registering, the client-side must hash the plain-text password using a cryptographically-strong hashing function (CSHF), such as HMAC-SHA-256 . Do NOT use weak hashing functions such as md5 because they are weak and are very easy to compute rainbow tables for them to try to reverse the hash. See the API documentation for POST /login for more details. Access Protected API Endpoints \u00b6 Steps \u00b6 Package the auth_token together with user_id into a JSON object. base64 -encode the JSON object to get a string payload . Send the payload as part of the Authorization : Bearer < token > header where <token> is replaced by payload . Example Usage Given JSON: { \"auth_token\" : \"MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI=\" , \"uuid\" : \"33b2303f-ea97-43cd-9e33-e619b1eb04f1\" } We need to base64-encode that to give the string payload : ewogICJhdXRoX3Rva2VuIjogIk1USXpORFUyTnpnNU1ERXlNelExTmpjNE9UQXhNak0wTlRZM09Ea3dNVEk9IiwKICAidXVpZCI6ICIzM2IyMzAzZi1lYTk3LTQzY2QtOWUzMy1lNjE5YjFlYjA0ZjEiCn0= Then put this payload as the Authorization : Bearer 's token: POST /meetings HTTP / 1.1 Authorization : Bearer ewogICJhdXRoX3Rva2VuIjogIk1USXpORFUyTnpnNU1ERXlNelExTmpjNE9UQXhNak0wTlRZM09Ea3dNVEk9IiwKICAidXVpZCI6ICIzM2IyMzAzZi1lYTk3LTQzY2QtOWUzMy1lNjE5YjFlYjA0ZjEiCn0=","title":"Overview"},{"location":"accounts-authentication/authentication/#authentication","text":"","title":"Authentication"},{"location":"accounts-authentication/authentication/#summary","text":"Most VRME API endpoints are protected . To gain access, the user is required to: Register an account through POST /register . Login via POST /login , which returns an auth_token . Send the AuthPayload in the Authorization: Bearer <token> header taking the place of the <token> place holder.","title":"Summary"},{"location":"accounts-authentication/authentication/#session-based-authentication-and-validity-duration","text":"Authentication in VRME APIs is session-based . The auth_token represents an authenticated user for a fixed duration (defaults to 30 days). When an user logs in, a new authentication session is issued and any old auth_token s are invalidated. When a user sucessfully authenticates for some protected API endpoint, then the expiration date of the auth_token (and thus the valid duration of the authentication session which the token represents) is automatically extended. For example, if a user's client holds an auth_token that was issued 5 days ago (meaning it will expire in 25 days), and that user sucessfully authenticates via one of the protected API endpoints, then that auth_token 's expiration date will be pushed back 5 days. The more frequent the user authenticates, the longer the auth_token is valid for.","title":"Session-Based Authentication and Validity Duration"},{"location":"accounts-authentication/authentication/#detailed-authentication-flow","text":"","title":"Detailed Authentication Flow"},{"location":"accounts-authentication/authentication/#register-an-account","text":"New users are required to register through POST /register . See the API endpoint documentation for detailed payload specification and return value. Upon successful registration, the client must store (persistently) the returned user_id which is the user's unique identifier; this user_id will be used as part of the authentication process.","title":"Register an Account"},{"location":"accounts-authentication/authentication/#login","text":"Password Security NEVER store the plain-text password or the client-side hashed password in caches / filesystem. Hashing Password We require that when the user is registering, the client-side must hash the plain-text password using a cryptographically-strong hashing function (CSHF), such as HMAC-SHA-256 . Do NOT use weak hashing functions such as md5 because they are weak and are very easy to compute rainbow tables for them to try to reverse the hash. See the API documentation for POST /login for more details.","title":"Login"},{"location":"accounts-authentication/authentication/#access-protected-api-endpoints","text":"","title":"Access Protected API Endpoints"},{"location":"accounts-authentication/authentication/#steps","text":"Package the auth_token together with user_id into a JSON object. base64 -encode the JSON object to get a string payload . Send the payload as part of the Authorization : Bearer < token > header where <token> is replaced by payload . Example Usage Given JSON: { \"auth_token\" : \"MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI=\" , \"uuid\" : \"33b2303f-ea97-43cd-9e33-e619b1eb04f1\" } We need to base64-encode that to give the string payload : ewogICJhdXRoX3Rva2VuIjogIk1USXpORFUyTnpnNU1ERXlNelExTmpjNE9UQXhNak0wTlRZM09Ea3dNVEk9IiwKICAidXVpZCI6ICIzM2IyMzAzZi1lYTk3LTQzY2QtOWUzMy1lNjE5YjFlYjA0ZjEiCn0= Then put this payload as the Authorization : Bearer 's token: POST /meetings HTTP / 1.1 Authorization : Bearer ewogICJhdXRoX3Rva2VuIjogIk1USXpORFUyTnpnNU1ERXlNelExTmpjNE9UQXhNak0wTlRZM09Ea3dNVEk9IiwKICAidXVpZCI6ICIzM2IyMzAzZi1lYTk3LTQzY2QtOWUzMy1lNjE5YjFlYjA0ZjEiCn0=","title":"Steps"},{"location":"accounts-authentication/delete-account/","text":"Delete Account \u00b6 Endpoint Path \u00b6 DELETE /account Authenticated required DANGER: Destructive non-recoverable operation Success Response \u00b6 204 No Content \u00b6","title":"Delete account"},{"location":"accounts-authentication/delete-account/#delete-account","text":"","title":"Delete Account"},{"location":"accounts-authentication/delete-account/#endpoint-path","text":"DELETE /account Authenticated required DANGER: Destructive non-recoverable operation","title":"Endpoint Path"},{"location":"accounts-authentication/delete-account/#success-response","text":"","title":"Success Response"},{"location":"accounts-authentication/delete-account/#204-no-content","text":"","title":"204 No Content"},{"location":"accounts-authentication/get-account-info/","text":"Get Account Info \u00b6 Currently only returns the first name and last name of the user. Endpoint Path \u00b6 GET /accounts/{user_id} Path Parameter \u00b6 Path Parameter Type Description user_id Uuid target user's unique identifier Success Response \u00b6 200 Ok \u00b6 { \"first_name\" : \"John\" , \"last_name\" : \"Doe\" }","title":"Get account info"},{"location":"accounts-authentication/get-account-info/#get-account-info","text":"Currently only returns the first name and last name of the user.","title":"Get Account Info"},{"location":"accounts-authentication/get-account-info/#endpoint-path","text":"GET /accounts/{user_id}","title":"Endpoint Path"},{"location":"accounts-authentication/get-account-info/#path-parameter","text":"Path Parameter Type Description user_id Uuid target user's unique identifier","title":"Path Parameter"},{"location":"accounts-authentication/get-account-info/#success-response","text":"","title":"Success Response"},{"location":"accounts-authentication/get-account-info/#200-ok","text":"{ \"first_name\" : \"John\" , \"last_name\" : \"Doe\" }","title":"200 Ok"},{"location":"accounts-authentication/get-avatar/","text":"Get Avatar \u00b6 Endpoint Path \u00b6 GET /accounts/{user_id}/avatar Path Parameter \u00b6 Path parameter Type Description user_id Uuid unique identifier of the user Success Response \u00b6 200 Ok \u00b6 Returns a PNG file. HTTP / 1.1 200 Ok Content-Type : image/png ...raw bytes","title":"Get avatar"},{"location":"accounts-authentication/get-avatar/#get-avatar","text":"","title":"Get Avatar"},{"location":"accounts-authentication/get-avatar/#endpoint-path","text":"GET /accounts/{user_id}/avatar","title":"Endpoint Path"},{"location":"accounts-authentication/get-avatar/#path-parameter","text":"Path parameter Type Description user_id Uuid unique identifier of the user","title":"Path Parameter"},{"location":"accounts-authentication/get-avatar/#success-response","text":"","title":"Success Response"},{"location":"accounts-authentication/get-avatar/#200-ok","text":"Returns a PNG file. HTTP / 1.1 200 Ok Content-Type : image/png ...raw bytes","title":"200 Ok"},{"location":"accounts-authentication/get-uuid-with-email/","text":"Get user_id (UUID) with Email \u00b6 Endpoint Path \u00b6 GET /accounts/uuid Required Payloads \u00b6 { \"email\" : \"...\" } Success Response \u00b6 200 Ok \u00b6 { \"uuid\" : \"...\" }","title":"Get uuid with email"},{"location":"accounts-authentication/get-uuid-with-email/#get-user_id-uuid-with-email","text":"","title":"Get user_id (UUID) with Email"},{"location":"accounts-authentication/get-uuid-with-email/#endpoint-path","text":"GET /accounts/uuid","title":"Endpoint Path"},{"location":"accounts-authentication/get-uuid-with-email/#required-payloads","text":"{ \"email\" : \"...\" }","title":"Required Payloads"},{"location":"accounts-authentication/get-uuid-with-email/#success-response","text":"","title":"Success Response"},{"location":"accounts-authentication/get-uuid-with-email/#200-ok","text":"{ \"uuid\" : \"...\" }","title":"200 Ok"},{"location":"accounts-authentication/login/","text":"Login \u00b6 Endpoint Path \u00b6 POST /login Required Payload \u00b6 Field Type Constraints email Email the same email used to register hashed_password Email same constraints on hashed_password as given in POST /register Example payload { \"email\" : \"no-reply@example.com\" , \"hashed_password\" : \"MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI=\" } Success Response \u00b6 201 Created \u00b6 An authentication session is created; the payload returned: Field Type Description user_id Uuid user's unique id auth_token String used for authentication \u2020 \u2020: auth_token The auth_token should be stored locally securely ; it is recommended that the client protect the auth_token as a secret, e.g. by performing symmetric encryption. Example response HTTP / 1.1 201 Created Content-Type : application/json { \"user_id\" : \"33b2303f-ea97-43cd-9e33-e619b1eb04f1\" , \"auth_token\" : \"MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI=\" } Error Response(s) \u00b6 400 Bad Request \u00b6 Returned if request missing fields or contain invalid values. 403 Forbidden \u00b6 Returned if email + hashed_password combination is incorrect. 404 Not Found \u00b6 Returned if no account exists with the email .","title":"Login"},{"location":"accounts-authentication/login/#login","text":"","title":"Login"},{"location":"accounts-authentication/login/#endpoint-path","text":"POST /login","title":"Endpoint Path"},{"location":"accounts-authentication/login/#required-payload","text":"Field Type Constraints email Email the same email used to register hashed_password Email same constraints on hashed_password as given in POST /register Example payload { \"email\" : \"no-reply@example.com\" , \"hashed_password\" : \"MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI=\" }","title":"Required Payload"},{"location":"accounts-authentication/login/#success-response","text":"","title":"Success Response"},{"location":"accounts-authentication/login/#201-created","text":"An authentication session is created; the payload returned: Field Type Description user_id Uuid user's unique id auth_token String used for authentication \u2020 \u2020: auth_token The auth_token should be stored locally securely ; it is recommended that the client protect the auth_token as a secret, e.g. by performing symmetric encryption. Example response HTTP / 1.1 201 Created Content-Type : application/json { \"user_id\" : \"33b2303f-ea97-43cd-9e33-e619b1eb04f1\" , \"auth_token\" : \"MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI=\" }","title":"201 Created"},{"location":"accounts-authentication/login/#error-responses","text":"","title":"Error Response(s)"},{"location":"accounts-authentication/login/#400-bad-request","text":"Returned if request missing fields or contain invalid values.","title":"400 Bad Request"},{"location":"accounts-authentication/login/#403-forbidden","text":"Returned if email + hashed_password combination is incorrect.","title":"403 Forbidden"},{"location":"accounts-authentication/login/#404-not-found","text":"Returned if no account exists with the email .","title":"404 Not Found"},{"location":"accounts-authentication/logout/","text":"Logout \u00b6 Endpoint Path \u00b6 POST /logout Authentication required","title":"Logout"},{"location":"accounts-authentication/logout/#logout","text":"","title":"Logout"},{"location":"accounts-authentication/logout/#endpoint-path","text":"POST /logout Authentication required","title":"Endpoint Path"},{"location":"accounts-authentication/register/","text":"Account Registration \u00b6 Endpoint Path \u00b6 POST /register Required Payload \u00b6 Field Type Constraints email Email valid email address first_name String non-empty last_name String non-empty hashed_password Hash non-empty \u2020 \u2020: hashed_password To compute the hashed_password , the client shall: Collect the user-inputted password as plaintext_password . Use a cryptographically-strong hashing function such as HMAC-SHA-256 ; take the first 32 bytes . Let this be hash_bytes . base64 -encode the hash_bytes into hashed_password ; the latter shall be a 44 -length base64 string . Example payload { \"email\" : \"no-reply@example.com\" , \"first_name\" : \"John\" , \"last_name\" : \"Doe\" , \"hashed_password\" : \"MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI=\" } Success Response \u00b6 201 Created \u00b6 Upon successful request and account creation, the server will return the payload: Field Type Description message String human-friendly info data.user_id Uuid unique identifier of the user \u2021 data.email Email the email used to register Note on user_id \u2021: The user_id should be stored locally because protected endpoints require the user's UUID to authenticate. Example response HTTP / 1.1 201 Created Content-Type : application/json Content-Length : 202 { \"data\" : { \"user_id\" : \"33b2303f-ea97-43cd-9e33-e619b1eb04f1\" , \"email: \" no-reply@example.com \" }, \" message : \"An account with email no-reply@example.com successfully created\" } Error Response(s) \u00b6 400 Bad Reqest \u00b6 Returned if missing fields or fields contain invalid values. 409 Conflict \u00b6 Returned if there is an account associated with the provided email already.","title":"Registration"},{"location":"accounts-authentication/register/#account-registration","text":"","title":"Account Registration"},{"location":"accounts-authentication/register/#endpoint-path","text":"POST /register","title":"Endpoint Path"},{"location":"accounts-authentication/register/#required-payload","text":"Field Type Constraints email Email valid email address first_name String non-empty last_name String non-empty hashed_password Hash non-empty \u2020 \u2020: hashed_password To compute the hashed_password , the client shall: Collect the user-inputted password as plaintext_password . Use a cryptographically-strong hashing function such as HMAC-SHA-256 ; take the first 32 bytes . Let this be hash_bytes . base64 -encode the hash_bytes into hashed_password ; the latter shall be a 44 -length base64 string . Example payload { \"email\" : \"no-reply@example.com\" , \"first_name\" : \"John\" , \"last_name\" : \"Doe\" , \"hashed_password\" : \"MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI=\" }","title":"Required Payload"},{"location":"accounts-authentication/register/#success-response","text":"","title":"Success Response"},{"location":"accounts-authentication/register/#201-created","text":"Upon successful request and account creation, the server will return the payload: Field Type Description message String human-friendly info data.user_id Uuid unique identifier of the user \u2021 data.email Email the email used to register Note on user_id \u2021: The user_id should be stored locally because protected endpoints require the user's UUID to authenticate. Example response HTTP / 1.1 201 Created Content-Type : application/json Content-Length : 202 { \"data\" : { \"user_id\" : \"33b2303f-ea97-43cd-9e33-e619b1eb04f1\" , \"email: \" no-reply@example.com \" }, \" message : \"An account with email no-reply@example.com successfully created\" }","title":"201 Created"},{"location":"accounts-authentication/register/#error-responses","text":"","title":"Error Response(s)"},{"location":"accounts-authentication/register/#400-bad-reqest","text":"Returned if missing fields or fields contain invalid values.","title":"400 Bad Reqest"},{"location":"accounts-authentication/register/#409-conflict","text":"Returned if there is an account associated with the provided email already.","title":"409 Conflict"},{"location":"accounts-authentication/update-info/","text":"Update Account Info \u00b6 Currently the user can only update their first_name or last_name . Endpoint Path \u00b6 PUT /accounts/{user_id} Authentication required Only the user may update their first name and/or last name. Path Parameter \u00b6 Path parameter Type Description user_id Uuid user's unique identifier Required Payload \u00b6 FIeld Type Optional/Required Description first_name String Optional first name last_name String Optional last name Success Response \u00b6 204 No Content \u00b6","title":"Update account info"},{"location":"accounts-authentication/update-info/#update-account-info","text":"Currently the user can only update their first_name or last_name .","title":"Update Account Info"},{"location":"accounts-authentication/update-info/#endpoint-path","text":"PUT /accounts/{user_id} Authentication required Only the user may update their first name and/or last name.","title":"Endpoint Path"},{"location":"accounts-authentication/update-info/#path-parameter","text":"Path parameter Type Description user_id Uuid user's unique identifier","title":"Path Parameter"},{"location":"accounts-authentication/update-info/#required-payload","text":"FIeld Type Optional/Required Description first_name String Optional first name last_name String Optional last name","title":"Required Payload"},{"location":"accounts-authentication/update-info/#success-response","text":"","title":"Success Response"},{"location":"accounts-authentication/update-info/#204-no-content","text":"","title":"204 No Content"},{"location":"accounts-authentication/upload-avatar/","text":"Upload Avatar \u00b6 Upload new avatar or replaces existing avatar. Endpoint Path \u00b6 POST /accounts/{user_id}/avatar Authentication required Only the user may change their avatar. Path Parameters \u00b6 Path parameter Type Description user_id Uuid unique identifier of the user Required Payload \u00b6 Content type We require the Content-Type header to be multipart/form-data : Content-Type: multipart/form-data With only 1 field, which must itself be of PNG format: Content-Type: image/png Then the payload is just raw PNG bytes contained within one field of the multipart/form-data . Success Response \u00b6 201 Created \u00b6","title":"Upload avatar"},{"location":"accounts-authentication/upload-avatar/#upload-avatar","text":"Upload new avatar or replaces existing avatar.","title":"Upload Avatar"},{"location":"accounts-authentication/upload-avatar/#endpoint-path","text":"POST /accounts/{user_id}/avatar Authentication required Only the user may change their avatar.","title":"Endpoint Path"},{"location":"accounts-authentication/upload-avatar/#path-parameters","text":"Path parameter Type Description user_id Uuid unique identifier of the user","title":"Path Parameters"},{"location":"accounts-authentication/upload-avatar/#required-payload","text":"Content type We require the Content-Type header to be multipart/form-data : Content-Type: multipart/form-data With only 1 field, which must itself be of PNG format: Content-Type: image/png Then the payload is just raw PNG bytes contained within one field of the multipart/form-data .","title":"Required Payload"},{"location":"accounts-authentication/upload-avatar/#success-response","text":"","title":"Success Response"},{"location":"accounts-authentication/upload-avatar/#201-created","text":"","title":"201 Created"},{"location":"meetings-presentations/","text":"Meetings API \u00b6","title":"Overview"},{"location":"meetings-presentations/#meetings-api","text":"","title":"Meetings API"}]}