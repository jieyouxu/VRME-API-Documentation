{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Virtual Reality Meeting Environment API Documentation \u00b6 Welcome to the API documenation for the Virtual Reality Meeting Environment! Backend Server See jieyouxu/VRME-Server-Rust . This API documentation assumes basic familiarity with the HTTP(S) protocol and assumes paths are in *nix systems ( / -separated paths). API Summary \u00b6 This API provides two major resources with authentication: Users and Accounts : see Accounts and Authentication API for details. Registration: POST /register Login: POST /login Logout: POST /logout Accounts: Get account id with email: GET /accounts/uuid Get account info: GET /accounts/{uuid} Update account info: PUT /accounts/{uuid} Delete account: DELETE /account Avatars: Get avatar: GET /accounts/{uuid}/avatar Upload avatar: POST /accounts/{uuid}/avatar Delete avatar: DELETE /accounts/{uuid}/avatar Meeting Sessions and Presentations : see Meetings and Presentations API for details. Meetings: Create session: POST /meetings Add listener: POST /meetings/{meeting_id} Leave: POST /meetings/{meeting_id}/leave Presentations: Get presentation: GET /meetings/{meeting_id}/presentation Upload presentation: POST /meetings/{meeting_id}/presentation Delete presentation: DELETE /meetings/{meeting_id}/presentation Authentication \u00b6 When a endpoint is protected , it will be explicitly marked. Read more about authentication requirements here . Rate Limiting \u00b6 Requests made to the VRME API are throttled by rate-limiting.","title":"Overview"},{"location":"#virtual-reality-meeting-environment-api-documentation","text":"Welcome to the API documenation for the Virtual Reality Meeting Environment! Backend Server See jieyouxu/VRME-Server-Rust . This API documentation assumes basic familiarity with the HTTP(S) protocol and assumes paths are in *nix systems ( / -separated paths).","title":"Virtual Reality Meeting Environment API Documentation"},{"location":"#api-summary","text":"This API provides two major resources with authentication: Users and Accounts : see Accounts and Authentication API for details. Registration: POST /register Login: POST /login Logout: POST /logout Accounts: Get account id with email: GET /accounts/uuid Get account info: GET /accounts/{uuid} Update account info: PUT /accounts/{uuid} Delete account: DELETE /account Avatars: Get avatar: GET /accounts/{uuid}/avatar Upload avatar: POST /accounts/{uuid}/avatar Delete avatar: DELETE /accounts/{uuid}/avatar Meeting Sessions and Presentations : see Meetings and Presentations API for details. Meetings: Create session: POST /meetings Add listener: POST /meetings/{meeting_id} Leave: POST /meetings/{meeting_id}/leave Presentations: Get presentation: GET /meetings/{meeting_id}/presentation Upload presentation: POST /meetings/{meeting_id}/presentation Delete presentation: DELETE /meetings/{meeting_id}/presentation","title":"API Summary"},{"location":"#authentication","text":"When a endpoint is protected , it will be explicitly marked. Read more about authentication requirements here .","title":"Authentication"},{"location":"#rate-limiting","text":"Requests made to the VRME API are throttled by rate-limiting.","title":"Rate Limiting"},{"location":"about/","text":"About the Project \u00b6 The Virtual Reality Meeting Environment project is designed to mitigate communication difficulities between users of remote meeting platforms. Technology Stack \u00b6 The backend is built using Rust with the actix-web framework. Backend Server jieyouxu/VRME-Server-Rust The Oculus Go frontend is built with Unity . Oculus Go Frontend Oculus Go Frontend The external account and meeting session management website is built with React.js . Management Website Frontend Management Website Frontend Team Members \u00b6 Name Role Email Jieyou Xu (Joe) Team Lead, Backend Developer jieyou.xu.18@ucl.ac.uk Yingming Luo Frontend Developer (Unity) yingming.luo.18@ucl.ac.uk Wenxin Wang Frontend Developer (Website) wenxin.wang.18@ucl.ac.uk","title":"Project"},{"location":"about/#about-the-project","text":"The Virtual Reality Meeting Environment project is designed to mitigate communication difficulities between users of remote meeting platforms.","title":"About the Project"},{"location":"about/#technology-stack","text":"The backend is built using Rust with the actix-web framework. Backend Server jieyouxu/VRME-Server-Rust The Oculus Go frontend is built with Unity . Oculus Go Frontend Oculus Go Frontend The external account and meeting session management website is built with React.js . Management Website Frontend Management Website Frontend","title":"Technology Stack"},{"location":"about/#team-members","text":"Name Role Email Jieyou Xu (Joe) Team Lead, Backend Developer jieyou.xu.18@ucl.ac.uk Yingming Luo Frontend Developer (Unity) yingming.luo.18@ucl.ac.uk Wenxin Wang Frontend Developer (Website) wenxin.wang.18@ucl.ac.uk","title":"Team Members"},{"location":"terminology/","text":"Terminology \u00b6 The API documentation uses some terminology throughout, that are usually defined by international standards and/or defined by IETF RFCs. Terminology Link base64 RFC 4648 PBKDF2 RFC 8018 SHA-256 RFC 6234 HTTP RFC 2616 TLS RFC 5246 JSON RFC 8259","title":"Terminology"},{"location":"terminology/#terminology","text":"The API documentation uses some terminology throughout, that are usually defined by international standards and/or defined by IETF RFCs. Terminology Link base64 RFC 4648 PBKDF2 RFC 8018 SHA-256 RFC 6234 HTTP RFC 2616 TLS RFC 5246 JSON RFC 8259","title":"Terminology"},{"location":"accounts-authentication/","text":"Accounts API \u00b6","title":"Overview"},{"location":"accounts-authentication/#accounts-api","text":"","title":"Accounts API"},{"location":"accounts-authentication/authentication/","text":"Authentication \u00b6 Summary \u00b6 Most VRME API endpoints are protected . To gain access, the user is required to: Register an account through POST /register . Login via POST /login , which returns an auth_token . Send the AuthPayload in the Authorization: Bearer <token> header taking the place of the <token> place holder. Session-Based Authentication and Validity Duration \u00b6 Authentication in VRME APIs is session-based . The auth_token represents an authenticated user for a fixed duration (defaults to 30 days). When an user logs in, a new authentication session is issued and any old auth_token s are invalidated. When a user sucessfully authenticates for some protected API endpoint, then the expiration date of the auth_token (and thus the valid duration of the authentication session which the token represents) is automatically extended. For example, if a user's client holds an auth_token that was issued 5 days ago (meaning it will expire in 25 days), and that user sucessfully authenticates via one of the protected API endpoints, then that auth_token 's expiration date will be pushed back 5 days. The more frequent the user authenticates, the longer the auth_token is valid for. Detailed Authentication Flow \u00b6 Register an Account \u00b6 New users are required to register through POST /register . See the API endpoint documentation for detailed payload specification and return value. Upon successful registration, the client must store (persistently) the returned user_id which is the user's unique identifier; this user_id will be used as part of the authentication process. Login \u00b6 Password Security NEVER store the plain-text password or the client-side hashed password in caches / filesystem. Hashing Password We require that when the user is registering, the client-side must hash the plain-text password using a cryptographically-strong hashing function (CSHF), such as HMAC-SHA-256 . Do NOT use weak hashing functions such as md5 because they are weak and are very easy to compute rainbow tables for them to try to reverse the hash. See the API documentation for POST /login for more details. Access Protected API Endpoints \u00b6 Steps \u00b6 Package the auth_token together with user_id into a JSON object. base64 -encode the JSON object to get a string payload . Send the payload as part of the Authorization : Bearer < token > header where <token> is replaced by payload . Example Usage Given JSON: { \"auth_token\" : \"MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI=\" , \"uuid\" : \"33b2303f-ea97-43cd-9e33-e619b1eb04f1\" } We need to base64-encode that to give the string payload : ewogICJhdXRoX3Rva2VuIjogIk1USXpORFUyTnpnNU1ERXlNelExTmpjNE9UQXhNak0wTlRZM09Ea3dNVEk9IiwKICAidXVpZCI6ICIzM2IyMzAzZi1lYTk3LTQzY2QtOWUzMy1lNjE5YjFlYjA0ZjEiCn0= Then put this payload as the Authorization : Bearer 's token: POST /meetings HTTP / 1.1 Authorization : Bearer ewogICJhdXRoX3Rva2VuIjogIk1USXpORFUyTnpnNU1ERXlNelExTmpjNE9UQXhNak0wTlRZM09Ea3dNVEk9IiwKICAidXVpZCI6ICIzM2IyMzAzZi1lYTk3LTQzY2QtOWUzMy1lNjE5YjFlYjA0ZjEiCn0=","title":"Overview"},{"location":"accounts-authentication/authentication/#authentication","text":"","title":"Authentication"},{"location":"accounts-authentication/authentication/#summary","text":"Most VRME API endpoints are protected . To gain access, the user is required to: Register an account through POST /register . Login via POST /login , which returns an auth_token . Send the AuthPayload in the Authorization: Bearer <token> header taking the place of the <token> place holder.","title":"Summary"},{"location":"accounts-authentication/authentication/#session-based-authentication-and-validity-duration","text":"Authentication in VRME APIs is session-based . The auth_token represents an authenticated user for a fixed duration (defaults to 30 days). When an user logs in, a new authentication session is issued and any old auth_token s are invalidated. When a user sucessfully authenticates for some protected API endpoint, then the expiration date of the auth_token (and thus the valid duration of the authentication session which the token represents) is automatically extended. For example, if a user's client holds an auth_token that was issued 5 days ago (meaning it will expire in 25 days), and that user sucessfully authenticates via one of the protected API endpoints, then that auth_token 's expiration date will be pushed back 5 days. The more frequent the user authenticates, the longer the auth_token is valid for.","title":"Session-Based Authentication and Validity Duration"},{"location":"accounts-authentication/authentication/#detailed-authentication-flow","text":"","title":"Detailed Authentication Flow"},{"location":"accounts-authentication/authentication/#register-an-account","text":"New users are required to register through POST /register . See the API endpoint documentation for detailed payload specification and return value. Upon successful registration, the client must store (persistently) the returned user_id which is the user's unique identifier; this user_id will be used as part of the authentication process.","title":"Register an Account"},{"location":"accounts-authentication/authentication/#login","text":"Password Security NEVER store the plain-text password or the client-side hashed password in caches / filesystem. Hashing Password We require that when the user is registering, the client-side must hash the plain-text password using a cryptographically-strong hashing function (CSHF), such as HMAC-SHA-256 . Do NOT use weak hashing functions such as md5 because they are weak and are very easy to compute rainbow tables for them to try to reverse the hash. See the API documentation for POST /login for more details.","title":"Login"},{"location":"accounts-authentication/authentication/#access-protected-api-endpoints","text":"","title":"Access Protected API Endpoints"},{"location":"accounts-authentication/authentication/#steps","text":"Package the auth_token together with user_id into a JSON object. base64 -encode the JSON object to get a string payload . Send the payload as part of the Authorization : Bearer < token > header where <token> is replaced by payload . Example Usage Given JSON: { \"auth_token\" : \"MTIzNDU2Nzg5MDEyMzQ1Njc4OTAxMjM0NTY3ODkwMTI=\" , \"uuid\" : \"33b2303f-ea97-43cd-9e33-e619b1eb04f1\" } We need to base64-encode that to give the string payload : ewogICJhdXRoX3Rva2VuIjogIk1USXpORFUyTnpnNU1ERXlNelExTmpjNE9UQXhNak0wTlRZM09Ea3dNVEk9IiwKICAidXVpZCI6ICIzM2IyMzAzZi1lYTk3LTQzY2QtOWUzMy1lNjE5YjFlYjA0ZjEiCn0= Then put this payload as the Authorization : Bearer 's token: POST /meetings HTTP / 1.1 Authorization : Bearer ewogICJhdXRoX3Rva2VuIjogIk1USXpORFUyTnpnNU1ERXlNelExTmpjNE9UQXhNak0wTlRZM09Ea3dNVEk9IiwKICAidXVpZCI6ICIzM2IyMzAzZi1lYTk3LTQzY2QtOWUzMy1lNjE5YjFlYjA0ZjEiCn0=","title":"Steps"},{"location":"accounts-authentication/login/","text":"Login \u00b6","title":"Login"},{"location":"accounts-authentication/login/#login","text":"","title":"Login"},{"location":"accounts-authentication/register/","text":"Account Registration \u00b6","title":"Registration"},{"location":"accounts-authentication/register/#account-registration","text":"","title":"Account Registration"},{"location":"meetings-presentations/","text":"Meetings API \u00b6","title":"Overview"},{"location":"meetings-presentations/#meetings-api","text":"","title":"Meetings API"}]}